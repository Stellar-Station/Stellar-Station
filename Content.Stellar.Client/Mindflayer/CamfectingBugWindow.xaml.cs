using Content.Client.Eye;
using Content.Client.Resources;
using Content.Stellar.Shared.Mindflayer;
using Content.Shared.IdentityManagement;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Stellar.Client.Mindflayer;

[GenerateTypedNameReferences]
public sealed partial class CamfectingBugWindow : DefaultWindow
{
    [Dependency] private readonly IEntityManager _entityManager = default!;
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    [Dependency] private readonly IResourceCache _resourceCache = default!;

    private readonly EyeLerpingSystem _eyeLerping;

    private EntityUid? _currentlyViewing;

    public event Action<EntityUid>? CameraSelected;

    public CamfectingBugWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _eyeLerping = _entityManager.System<EyeLerpingSystem>();

        var texture = _resourceCache.GetTexture("/Textures/Interface/Nano/square_black.png");
        var shader = _prototypeManager.Index<ShaderPrototype>("CameraStatic").Instance().Duplicate();

        CameraView.ViewportSize = new Vector2i(400, 400);
        CameraViewBackground.Stretch = TextureRect.StretchMode.Scale;
        CameraViewBackground.Texture = texture;
        CameraViewBackground.ShaderOverride = shader;

        CameraSelector.OnItemSelected += OnCameraSelected;
    }

    private void OnCameraSelected(OptionButton.ItemSelectedEventArgs args)
    {
        CameraSelected?.Invoke((EntityUid) CameraSelector.GetItemMetadata(CameraSelector.GetIdx(args.Id))!);
    }

    public void Update(MindflayerCamfectingBugComponent camfecting)
    {
        SetupSelector(camfecting);
        SetupEye(camfecting);
    }

    private void SetupSelector(MindflayerCamfectingBugComponent camfecting)
    {
        if (camfecting.TrackedEntities.Count == CameraSelector.ItemCount)
            return;

        CameraSelector.Clear();

        foreach (var entity in camfecting.TrackedEntities)
        {
            if (!camfecting.TrackedLabels.TryGetValue(entity, out var label))
                label = Identity.Name(entity, _entityManager);

            CameraSelector.AddItem(label);
            CameraSelector.SetItemMetadata(CameraSelector.ItemCount - 1, entity);
        }
    }

    private void SetupEye(MindflayerCamfectingBugComponent camfecting)
    {
        if (camfecting.CurrentlyViewing is { } viewing)
        {
            if (_currentlyViewing == null)
            {
                _eyeLerping.AddEye(viewing);
                _currentlyViewing = viewing;
            }
            else if (_currentlyViewing != viewing)
            {
                _eyeLerping.RemoveEye(_currentlyViewing.Value);
                _eyeLerping.AddEye(viewing);
                _currentlyViewing = viewing;
            }
        }
        else if (_currentlyViewing is { } currentlyViewing)
        {
            _eyeLerping.RemoveEye(currentlyViewing);
            _currentlyViewing = null;
        }

        if (!_entityManager.TryGetComponent<EyeComponent>(_currentlyViewing, out var eye))
        {
            CameraView.Eye = null;
            CameraViewBackground.Visible = true;
            return;
        }

        CameraView.Eye = eye.Eye;
        CameraViewBackground.Visible = false;
    }
}
